<%- include("partials/header.ejs") %>
    <div class="menu-bar">
        <button class="btn btn-outline-primary btn-sm" id="add-book">Add a book!</button>
        <div class="sort-items d-flex px-2">
            <span class="btn-sm">Sort By: </span>
            <button class="sort-btn mx-2 btn btn-sm" data-sortcat="title">Title <i class="fa-solid fa-arrow-up-wide-short" id="title-ico"></i></button>
            <button class="sort-btn mx-2 btn btn-sm" data-sortcat="author">Author <i class="fa-solid fa-arrow-up-wide-short" id="author-ico"></i></button>
            <button class="sort-btn mx-2 btn btn-sm" data-sortcat="rating">Rating <i class="fa-solid fa-arrow-up-wide-short" id="rating-ico"></i></button>
            <button class="sort-btn mx-2 btn btn-sm" data-sortcat="date_read">Read Date<i class="fa-solid fa-arrow-up-wide-short" id="date-ico"></i></button>
        </div>
    </div>
    <!-- books read list -->
    <div id="book-container" data-books='<%= JSON.stringify(books) %>'>
        <%if(books && books.length >0) {%>
            <ul class="book-list px-0 py-0 rounded" id="book-list">
                <!-- <% books.forEach(book=>{ %>
                    <li>
                        <div class="book-card rounded">
                            <img class="book-img mb-1 rounded" src="<%=book.avatar %>" alt="<%= book.title%>" data-id="<%=book.id%>" id="book-image">
                            <span class="arial-ital"><strong>Title: </strong> <%= book.title%></span>
                            <span class="arial-ital"><strong>Author: </strong> <%= book.author%></span>
                            <span class="arial-ital"><strong>Language: </strong><small><%=book.lang%></small></span>
                            <hr style="margin:0;padding:0;">                    
                            <div class="rating-container">
                                <div class="rating">
                                    <div class="stars-outer">
                                    <div class="stars-inner" id="book-<%=book.id%>"></div>
                                    </div>
                                </div>
                                <span class="star-rating arial-ital"  data-rating="<%= book.rating%>" data-id="<%=book.id%>" > <%= book.rating%>/5</span>
                                <p><small><strong>Read Date:</strong> <%= formatDate(book.date_read) %></small></p>
                            </div>
                            <div class="ctrls-container gap-1">
                                <button class="ctrls btn btn-dark btn-sm" id="view-button" data-id="<%= book.id%>">More...</button>
                                <button class="ctrls btn btn-dark btn-sm" id="edit-button" data-id="<%= book.id%>">Edit</button>
                                <button class="ctrls  btn btn-dark btn-sm" id="del-button" data-id="<%= book.id%>">Delete</button>
                            </div>
                        </div>
                    </li>    
                <% });%> -->
            </ul>
            <div id="pagination-controls" class="d-flex justify-content-end mb-4">
                <button id="prev-page" class="btn btn-sm btn-outline-success"><i class="fa-regular fa-square-caret-left"></i></button>
                <span id="current-page" class="mx-2 btn-sm">page 1</span>
                <button id="next-page" class="btn btn-sm btn-outline-success"><i class="fa-regular fa-square-caret-right"></i></button>
            </div>            
        <%}else{%>
                <h5 class="flex-cont">You havent added any books to your list yet</h5>    
        <%}%>
    </div>

    <div class="modal" id="add-newBk">
        <div class="mymodal-content container container-lg container-md container-sm dark">
            <div class="ModalTitleBar">Add a new book <span class="close" id="closeAddModal">&times;</span></div>
            <form action="/add"  id="add-new" method="POST" enctype="multipart/form-data">
                <div class="row">
                    <div class="col-lg-3 mt-2 col-sm-12 col-md-12">
                        <div class="pict">
                            <img  alt="Add a book image" class="rounded border defa-img" id="book-cover-preview">
                            <hr>
                            <div class="ctrls-flex-c btn-group mb-1 p-1">
                                <input type="file" name="coverImage" id="coverImage" class="form-control form-control-md mb-2 btn btn-primary" accept="image/*">
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-9 mt-2 col-sm-12 col-md-12">
                        <div class="row mt-2">
                            <div class="col-6 mb-1 col-sm-12 col-md-12">
                                <!-- <label for="title" class="form-label">Title</label> -->
                                <input type="text" name="title" id="title" class="form-control" required placeholder="Title">
                            </div>
                            <div class="col-6 col-sm-12 mb-1 col-md-12">
                                <!-- <label for="author" class="form-label">Author </label> -->
                                <input type="text" name="author" id="author" class="form-control" required placeholder="Author">
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-6 mb-1 col-sm-12 col-md-12">
                                <!-- <label for="title" class="form-label">ISBN</label> -->
                                <input type="text" name="isbn" id="isbn" class="form-control mb-1" required maxlength="15" placeholder="ISBN">
                                <button class="btn btn-primary rounded hide" id="search-online">Search for Cover Online</button>
                            </div>
                            <div class="col-6 mb-1 col-sm-12 col-md-12">
                                <!-- <label for="lang" class="form-label">Language </label> -->
                                <input type="text" name="lang" id="lang" class="form-control" required placeholder="Language">
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-6 mb-1 col-sm-12 col-md-12 col-auto">
                                <div class="row g-3 align-items-center px-1">
                                    <div class="col-auto">
                                        <label for="date_read" class="col-form-label fs-6">Date read</label>
                                    </div>
                                    <div class="col-auto">
                                        <input type="date" name="date_read" id="date_read" class="form-control" required placeholder="Date read">
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 col-sm-12 mb-1 col-md-12">
                                <label class="form-label rating-label mx-2">Rating</label>
                                <input type="hidden" name="rating" id="rating" class="form-control" required placeholder="Rating">
                                <div class="rating" data-rating="0" id="rating-add">
                                    <div class="stars-outer" id="rating-add-outer">
                                      <div class="stars-inner" id="rating-add-inner"></div>
                                    </div>
                                  </div>
                                  <span  class="rating-show rating-label" id="rating-disp"></span>
                            </div>
                        </div>                                     
                    </div>
                </div>
                    <div class="editor-container mb-3">
                        <p class="notes-header ModalTitleBar rounded" >My notes about this book</p>
                        <div  id="editor" class="editor "> </div>
                        <input type ="hidden" name="notes" id="add-notes" />
                    </div>
                <div class="row p-0">
                    <div class="col-12 col-sm-12 col-md-12 d-flex justify-content-center p-2 flex-ctrls">
                        <input type="hidden" name="notes" id="add-notes">
                        <input type="hidden" name="imgUrl" id="img-Url">
                        <button class="btn btn-secondary mb-1 ms-2 flex-fill" id="reset-add" type="reset">Reset</button>
                        <button class="btn btn-primary mb-1 ms-2 flex-fill" id="submit-Add" type="submit">Submit</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
<%- include("partials/footer.ejs") %>
<script type="module">
    //#region imports region
        import { createQuillEditor } from  '/js/quillSetUp.js';
        import {showDynamicAlert, showModal, closeModal, 
                fillStars, getQlContent, formatDate, showConfirmModal} from '/js/Util.js';
        import { initializeCommonDOM, initializeRatingSystem, initializeEdits } from '/js/DOM.js';
    //#endregion    
    document.addEventListener('DOMContentLoaded', ()=> {
     //books object
     const bookContainer = document.getElementById('book-container');
     const books = JSON.parse(bookContainer.dataset.books); // Parse the books data   
    //#region avatar upload declarations
        const imgFileInput=document.getElementById('coverImage');
        const coverImgPreview=document.getElementById('book-cover-preview');
    //#endregion
    //#region  search declarations
        const searchLbl="Search the open-library By"
        const searchModal=document.getElementById('search-modal');
        const loadingWait =document.getElementById('spinner-modal');
        const searchInput=document.getElementById('searchInput');
        const closeSearchBtn=document.getElementById('closeSearchModal');
        const modalContent=document.getElementById('mymodal-content');
        const searchForm= document.getElementById('searchForm');
    //#endregion
    //#region :Add new book declarations
            const addBtn=document.getElementById('add-book');
            const addEditModal=document.getElementById('add-newBk');
            const closeAddBtn=document.getElementById('closeAddModal');
            const qlContainer=document.getElementById('editor');
            const addNewForm=document.getElementById('add-new');
            const submitBtn=document.getElementById('submit-Add');
            const noteText=document.getElementById('add-notes');
            const imgUrl=document.getElementById('img-Url');

            const addQuill=createQuillEditor(qlContainer)
    //#endregion
    //#region Hide or show search button when ISBN is keyed in
            const isbnIput=document.getElementById('isbn');
            const searchBtn=document.getElementById('search-online');
            isbnIput.addEventListener('input',()=>{
                if(isbnIput.value.trim()!==""){
                    searchBtn.style.display='block';
                }else{
                    searchBtn.style.display='none';
                }
            });
    //#endregion
    //#region Add book functionality
            submitBtn.addEventListener('click',(e)=>{
                if(addQuill.root.innerHTML===''){
                    e.preventDefault();
                }else{
                    getQlContent(noteText, addQuill);
                }
            });

            addBtn.addEventListener('click', ()=>{
                let currentRating=0;
                document.querySelector('.ModalTitleBar').innerHTML = `<div class="ModalTitleBar">Add Book! <span class="close" id="closeAddModal">&times;</span></div>`;;
                
                addNewForm.reset();

                addQuill.setContents([]);

                addNewForm.action="/add";

                document.getElementById('submit-Add').innerText = "Submit";

                showModal(addEditModal);
            });

            closeAddBtn.onclick=()=>{
                closeModal(addEditModal);
            }
            addNewForm.onsubmit=(e)=>{
                if(addQuill.root.innerHTML===''){
                    e.preventDefault();
                }else{
                    console.log(addQuill.root.innerHTML);
                    getQlContent(noteText, addQuill);
                }
            }
    //#endregion
    //#region sort functionality

        const upClass = 'fa-arrow-up-wide-short';
        const downClass = 'fa-arrow-down-wide-short';

        const activeColor = '#0062cc';  // Active color (blue)
        const inactiveColor = '#212529'; // Inactive color (dark)
        const sortButtons = document.querySelectorAll('.sort-btn');    

        let currentPage = 1;
        const booksPerPage = 10; // Number of books to show per page
        renderBooks(books,currentPage);
    // Function to render books
        function renderBooks(books, page=1) {
            const bookList = document.getElementById('book-list');
            const totalPages = Math.ceil(books.length / booksPerPage);
            
            // Ensure the current page is within valid bounds
            if (page < 1) page = 1;
            if (page > totalPages) page = totalPages;

            // Calculate start and end indices for books to show on the current page
            const startIndex = (page - 1) * booksPerPage;
            const endIndex = Math.min(startIndex + booksPerPage, books.length);

            bookList.innerHTML = ''; // Clear existing books

            // Display only the books for the current page
            const booksToDisplay = books.slice(startIndex, endIndex);
            booksToDisplay.forEach(book => {
                const li = document.createElement('li');
                li.classList.add('book-item');
                li.setAttribute('data-title', book.title);
                li.setAttribute('data-author', book.author);
                li.setAttribute('data-rating', book.rating);
                li.setAttribute('data-date', book.date_read);

                li.innerHTML = `
                    <div class="book-card rounded">
                        <img class="book-img mb-1 rounded book-image" src="${book.avatar}" alt="${book.title}" data-id="${book.id}" id="book-image">
                        <span class="arial-ital"><strong>Title: </strong> ${book.title}</span>
                        <span class="arial-ital"><strong>Author: </strong> ${book.author}</span>
                        <span class="arial-ital"><strong>Language: </strong>${book.lang}</span>
                        <hr style="margin:0;padding:0;">                    
                        <div class="rating-container">
                            <div class="rating">
                                <div class="stars-outer">
                                    <div class="stars-inner" id="book-${book.id}"></div>
                                </div>
                            </div>
                            <span class="star-rating arial-ital" data-rating="${book.rating}" data-id="${book.id}">${book.rating}/5</span>
                        </div>
                        <p><small><strong>Read Date: </strong> ${formatDate(book.date_read)}</small></p>
                        <div class="ctrls-container gap-1">
                            <button class="ctrls btn btn-dark btn-sm view-button" id="view-button-"${book.id} data-id="${book.id}">More...</button>
                            <button class="ctrls btn btn-dark btn-sm edit-button" id="edit-button-"${book.id} data-id="${book.id}">Edit</button>
                            <button class="ctrls btn btn-dark btn-sm del-button" id="del-button-"${book.id} data-id="${book.id}">Delete</button>
                        </div>
                    </div>
                `;
                    
                bookList.appendChild(li);
            });
                document.getElementById('current-page').innerText = `page ${page} of ${totalPages}`;
                initializeRatingSystem();
                initializeCommonDOM();
                initializeEdits(books, addQuill);        
    }
     // Sorting functions
        function sortBooks(property, order = 'asc') {
        const sortedBooks = books.sort((a, b) => {
            if (property === 'date_read') {
                // Parse dates and compare
                const dateA = new Date(a[property]);
                const dateB = new Date(b[property]);
                return order === 'asc' ? dateA - dateB : dateB - dateA;
            } else if (typeof a[property] === 'string') {
                // String comparison for title/author
                return order === 'asc' ? a[property].localeCompare(b[property]) : b[property].localeCompare(a[property]);
            } else {
                // Numeric comparison for rating
                return order === 'asc' ? a[property] - b[property] : b[property] - a[property];
            }
        });
        renderBooks(sortedBooks);
    }

        sortButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Get the icon inside the clicked button
            // Reset all icons to inactive state
            let sortOrder;
            const sortProperty = button.getAttribute('data-sortcat');
            
            sortButtons.forEach(btn => {
                const icon = btn.querySelector('i');
                btn.style.color = inactiveColor;
                icon.style.color = inactiveColor;
                });            
            const icon = button.querySelector('i');
            // Toggle the sorting direction
            if (icon.classList.contains(upClass)) {
                icon.classList.remove(upClass);
                icon.classList.add(downClass);
                sortOrder="desc";
                sortBooks(sortProperty, sortOrder);


            } else {
                icon.classList.remove(downClass);
                icon.classList.add(upClass);
                sortOrder="asc";
                sortBooks(sortProperty, sortOrder);

            }
           button.style.color=activeColor;
           button.querySelector('i').style.color=activeColor;
        });
    });

    // Function to handle page changes
        function changePage(delta) {
        currentPage += delta;
        renderBooks(books, currentPage);
    }
    // Add event listeners for pagination buttons
        document.getElementById('prev-page').addEventListener('click', () => changePage(-1));
        document.getElementById('next-page').addEventListener('click', () => changePage(1));
    //#endregion

    //#region Search functionality
            document.querySelectorAll('.drop-downSearch').forEach(item =>{
                item.addEventListener('click', (event)=>{
                    event.preventDefault();
                    // console.log('click event fired');
                    const selectedText=item.textContent;
                    const searchBy=item.getAttribute('data-searchby');

                    document.getElementById('searchByLabel').textContent=`${searchLbl}: ${selectedText}`;

                    document.getElementById('searchByHidden').value=searchBy;

                    document.getElementById('searchInput').ariaPlaceholder=`Search By: ${selectedText}`;
                    document.getElementById('searchInput').placeholder=`Search By: ${selectedText}`;
                });
            });

            // validate search input and display the modal that is going to show the books
            searchForm.addEventListener('submit',(event)=>{
                const searchValue=searchInput.value.trim();
                if(searchValue===''){
                    event.preventDefault();
                    // show dynamic message instead of the usual alert
                    showDynamicAlert('Please input a search value',searchForm);
                    return;
                }
                
            });
    //#endregion
        
    //#region avatar/file upload functionality
            imgFileInput.addEventListener('input',()=>{
                if(imgFileInput.files && imgFileInput.files.length > 0){
                    coverImgPreview.style.backgroundImage = 'none';
                }else{
                    coverImgPreview.style.backgroundImage=`url('/covers/DefaultCover.png')`;
                    coverImgPreview.src="";
                }
                previewImage();
            });    
            function previewImage() {
                const reader = new FileReader();
                reader.onload = function() {
                    coverImgPreview.src = reader.result;
                };
                reader.readAsDataURL(event.target.files[0]);
            }        
    //#endregion

    //#region set ratings stars region and other common DOM processing
            initializeRatingSystem();
            initializeCommonDOM();
    //#endregion
    
    //#region Edit functionality
            initializeEdits(books,addQuill);
    //#endregion

    //#region Delete book functionality


    });
</script>